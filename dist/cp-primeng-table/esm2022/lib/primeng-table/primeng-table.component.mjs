import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DEFAULT_ROWS_PER_PAGE, DEFAULT_ROWS_PER_PAGE_OPTIONS, DEFAULT_TABLE_SETTINGS, } from '../constants/primeng-table';
import { buildCheckboxFilterOptions, deepCloneObject, determineButtonValue, transformFiltersForRequest, transformSortForRequest, } from '../helpers/primeng-table-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/table";
import * as i3 from "primeng/api";
import * as i4 from "primeng/button";
import * as i5 from "primeng/calendar";
import * as i6 from "primeng/multiselect";
import * as i7 from "@angular/forms";
export class PrimeNgTable {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.onRowClick = new EventEmitter();
        this.data = [];
        this.columns = [];
        this.tableSettings = DEFAULT_TABLE_SETTINGS;
        this.determineButtonValue = determineButtonValue;
        this.buildCheckboxFilterOptions = buildCheckboxFilterOptions;
        this.DEFAULT_ROWS_PER_PAGE = DEFAULT_ROWS_PER_PAGE;
        this.DEFAULT_ROWS_PER_PAGE_OPTIONS = DEFAULT_ROWS_PER_PAGE_OPTIONS;
    }
    ngOnInit() {
        this.lastEventLoaded = {};
        this.columns.forEach((col) => {
            if (col.checkboxFilterOptions) {
                col.checkboxFilterOptions = this.buildCheckboxFilterOptions(col.checkboxFilterOptions);
            }
        });
    }
    loadData(event) {
        if (!this.loadDataService) {
            return;
        }
        this.lastEventLoaded = deepCloneObject(event);
        const currentPage = event.first / event.rows + 1;
        let params = {
            filter: transformFiltersForRequest(event.filters),
            sort: event.multiSortMeta && transformSortForRequest(event.multiSortMeta),
            pageable: {
                // Pages count start from 0 on BE, so we are decreasing the page with 1
                page: currentPage - 1,
                size: event.rows,
            },
        };
        this.loadDataService(params).subscribe({
            next: (res) => {
                if (!res) {
                    this.totalRecords = 0;
                    return;
                }
                const { page, content } = res.data;
                if (!content) {
                    this.data = [];
                }
                else {
                    this.data = content;
                }
                this.totalRecords = page?.totalElements;
                this.tableSettings.totalRecords = this.totalRecords;
            },
            error: (err) => {
                throw Error(err);
            },
        });
    }
    reloadData() {
        this.loadData(this.lastEventLoaded);
    }
    updateEntity(updatedData) {
        const index = this.data.findIndex((row) => row.id === updatedData.id);
        if (index !== -1) {
            const updatedEntity = { ...this.data[index], ...updatedData };
            this.data[index] = updatedEntity;
        }
    }
    updateTableData(updatedData) {
        if (!updatedData) {
            return;
        }
        this.data = [...updatedData];
    }
    getFormattedText(col, rowData) {
        if (!rowData[col.field]) {
            return;
        }
        if (col.type === 'date') {
            return this.datePipe.transform(rowData[col.field], 'y-MM-d');
        }
        if (typeof rowData[col.field] === 'object') {
            return rowData[col.field].value;
        }
        return rowData[col.field];
    }
    onDateSelect(value, filterCallback) {
        if (value) {
            const timezoneOffset = value.getTimezoneOffset() * 60000;
            const adjustedDate = new Date(value.getTime() - timezoneOffset);
            const isoFormattedDate = adjustedDate.toISOString().slice(0, -1).split('T')[0];
            filterCallback(isoFormattedDate);
        }
    }
    handleButtonClick(event, button, rowData, rowIndex) {
        event.stopPropagation();
        button.action(rowData, rowIndex);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PrimeNgTable, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PrimeNgTable, selector: "primeng-table", inputs: { loadDataService: "loadDataService", data: "data", columns: "columns", tableSettings: "tableSettings", dropdowns: "dropdowns" }, outputs: { onRowClick: "onRowClick" }, ngImport: i0, template: "<p-table\n  #dataTable\n  [columns]=\"columns\"\n  [value]=\"data\"\n  [paginator]=\"!!tableSettings.showPaginator\"\n  [rows]=\"tableSettings.rowsPerPage || DEFAULT_ROWS_PER_PAGE\"\n  [showCurrentPageReport]=\"true\"\n  [currentPageReportTemplate]=\"'Showing {first} to {last} of {totalRecords} entries'\"\n  [rowsPerPageOptions]=\"tableSettings.rowsPerPageOptions || DEFAULT_ROWS_PER_PAGE_OPTIONS\"\n  [totalRecords]=\"tableSettings.totalRecords\"\n  [lazy]=\"true\"\n  (onLazyLoad)=\"loadData($event)\"\n  sortMode=\"multiple\"\n  styleClass=\"p-datatable-sm\"\n  [class]=\"tableSettings.cssClass\"\n  [selectionMode]=\"tableSettings.isRowClickable ? 'single' : null\"\n>\n  <ng-template pTemplate=\"header\" let-columns>\n    <!-- Column Names -->\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th *ngIf=\"col.sortable\" [pSortableColumn]=\"col.field\" [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <div class=\"column-header-items\">\n            {{ col.headerText }}\n            <p-sortIcon id=\"{{ 'sort' + col.field }}\" [field]=\"col.field\"></p-sortIcon>\n\n            <!-- Filter if Date type -->\n            <p-columnFilter\n              *ngIf=\"col.type === 'date'\"\n              id=\"{{ 'filter' + col.field }}\"\n              type=\"date\"\n              display=\"menu\"\n              field=\"{{ col.field }}\"\n              [showMatchModes]=\"false\"\n              [showOperator]=\"false\"\n              [showAddButton]=\"false\"\n              [showApplyButton]=\"false\"\n            >\n              <ng-template pTemplate=\"filter\" let-filter=\"filterCallback\">\n                <p-calendar (onSelect)=\"onDateSelect($event, filter)\"></p-calendar>\n              </ng-template>\n            </p-columnFilter>\n          </div>\n        </th>\n\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\" *ngIf=\"!col.sortable\">\n          {{ col.headerText }}\n        </th>\n      </ng-container>\n    </tr>\n\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <p-columnFilter\n            *ngIf=\"col.type === 'text' && !col.checkboxFilterOptions\"\n            type=\"text\"\n            id=\"{{ 'filter' + col.field }}\"\n            field=\"{{ col.field }}\"\n            [matchMode]=\"col.matchMode\"\n          >\n          </p-columnFilter>\n\n          <p-columnFilter\n            *ngIf=\"col.checkboxFilterOptions\"\n            field=\"{{ col.field }}\"\n            id=\"{{ 'filter' + col.field }}\"\n            class=\"hide-filter-button\"\n          >\n            <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\n              <p-multiSelect\n                id=\"{{ 'multiselect' + col.field }}\"\n                [ngModel]=\"value\"\n                [options]=\"col.checkboxFilterOptions\"\n                [placeholder]=\"'Select'\"\n                (onChange)=\"filter($event.value)\"\n              >\n              </p-multiSelect>\n            </ng-template>\n          </p-columnFilter>\n        </th>\n      </ng-container>\n    </tr>\n  </ng-template>\n\n  <!-- Rows data -->\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-ri=\"rowIndex\">\n    <tr (click)=\"onRowClick && onRowClick.emit(rowData)\" id=\"{{ 'tr' + rowData.id }}\">\n      <td *ngFor=\"let col of columns\">\n        <div *ngIf=\"col.type !== 'status'\" [ngClass]=\"{ 'fw-bold': col.bold }\">\n          {{ getFormattedText(col, rowData) }}\n        </div>\n\n        <div *ngIf=\"col.type === 'buttons'\" style=\"display: flex; justify-content: flex-end\">\n          <ng-container *ngFor=\"let button of col.buttons\">\n            <p-button\n              *ngIf=\"button.isVisible !== undefined ? button.isVisible(rowData) : true && !button.iconSvg\"\n              id=\"{{ 'btn' + button.label }}\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n            >\n              {{ determineButtonValue(button, 'label', rowData) }}\n            </p-button>\n\n            <p-button\n              *ngIf=\"button.iconSvg\"\n              [text]=\"true\"\n              [rounded]=\"true\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n              severity=\"secondary\"\n            >\n              <ng-template pTemplate=\"content\">\n                <span class=\"material-symbols-outlined\" style=\"font-size: 35px\">{{ button.iconSvg }}</span>\n              </ng-template>\n            </p-button>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n  <!-- Message if no table data -->\n  <ng-template pTemplate=\"emptymessage\" let-columns>\n    <tr>\n      <td [attr.colspan]=\"columns.length\">No results found.</td>\n    </tr>\n  </ng-template>\n</p-table>\n", styles: ["::ng-deep-dropdown [styleclass=p-paginator-rpp-options]{border:none!important}::ng-deep tr{height:30px}::ng-deep .p-multiselect-label-container{width:0px}::ng-deep .hide-filter-button{min-width:200px}::ng-deep .hide-filter-button .p-column-filter-menu-button{display:none}::ng-deep .p-datatable-wrapper{margin-bottom:1rem;min-height:70vh;overflow:auto!important}::ng-deep .column-header-items{display:flex;align-items:center}::ng-deep td[colspan]{height:300px!important;font-weight:700;text-align:center!important;pointer-events:none}::ng-deep table{width:100%;cursor:default}.column-width{width:200px;background-color:#fff!important}::ng-deep .p-datatable.p-datatable-sm .p-datatable-tbody>tr>td{padding:.25rem 1rem}.buttons-container{display:flex;justify-content:center}\n"], dependencies: [{ kind: "component", type: i2.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "directive", type: i3.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "directive", type: i2.SortableColumn, selector: "[pSortableColumn]", inputs: ["pSortableColumn", "pSortableColumnDisabled"] }, { kind: "component", type: i2.SortIcon, selector: "p-sortIcon", inputs: ["field"] }, { kind: "component", type: i2.ColumnFilter, selector: "p-columnFilter", inputs: ["field", "type", "display", "showMenu", "matchMode", "operator", "showOperator", "showClearButton", "showApplyButton", "showMatchModes", "showAddButton", "hideOnClear", "placeholder", "matchModeOptions", "maxConstraints", "minFractionDigits", "maxFractionDigits", "prefix", "suffix", "locale", "localeMatcher", "currency", "currencyDisplay", "useGrouping", "showButtons"] }, { kind: "component", type: i4.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "raised", "rounded", "text", "plain", "severity", "outlined", "link", "size", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "component", type: i5.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "ariaLabel", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale", "view", "defaultDate"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }, { kind: "component", type: i6.MultiSelect, selector: "p-multiSelect", inputs: ["id", "ariaLabel", "style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectionLimit", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectAll", "focusOnHover", "filterFields", "selectOnFocus", "autoOptionFocus"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove", "onSelectAllChange"] }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PrimeNgTable, decorators: [{
            type: Component,
            args: [{ selector: 'primeng-table', template: "<p-table\n  #dataTable\n  [columns]=\"columns\"\n  [value]=\"data\"\n  [paginator]=\"!!tableSettings.showPaginator\"\n  [rows]=\"tableSettings.rowsPerPage || DEFAULT_ROWS_PER_PAGE\"\n  [showCurrentPageReport]=\"true\"\n  [currentPageReportTemplate]=\"'Showing {first} to {last} of {totalRecords} entries'\"\n  [rowsPerPageOptions]=\"tableSettings.rowsPerPageOptions || DEFAULT_ROWS_PER_PAGE_OPTIONS\"\n  [totalRecords]=\"tableSettings.totalRecords\"\n  [lazy]=\"true\"\n  (onLazyLoad)=\"loadData($event)\"\n  sortMode=\"multiple\"\n  styleClass=\"p-datatable-sm\"\n  [class]=\"tableSettings.cssClass\"\n  [selectionMode]=\"tableSettings.isRowClickable ? 'single' : null\"\n>\n  <ng-template pTemplate=\"header\" let-columns>\n    <!-- Column Names -->\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th *ngIf=\"col.sortable\" [pSortableColumn]=\"col.field\" [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <div class=\"column-header-items\">\n            {{ col.headerText }}\n            <p-sortIcon id=\"{{ 'sort' + col.field }}\" [field]=\"col.field\"></p-sortIcon>\n\n            <!-- Filter if Date type -->\n            <p-columnFilter\n              *ngIf=\"col.type === 'date'\"\n              id=\"{{ 'filter' + col.field }}\"\n              type=\"date\"\n              display=\"menu\"\n              field=\"{{ col.field }}\"\n              [showMatchModes]=\"false\"\n              [showOperator]=\"false\"\n              [showAddButton]=\"false\"\n              [showApplyButton]=\"false\"\n            >\n              <ng-template pTemplate=\"filter\" let-filter=\"filterCallback\">\n                <p-calendar (onSelect)=\"onDateSelect($event, filter)\"></p-calendar>\n              </ng-template>\n            </p-columnFilter>\n          </div>\n        </th>\n\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\" *ngIf=\"!col.sortable\">\n          {{ col.headerText }}\n        </th>\n      </ng-container>\n    </tr>\n\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <p-columnFilter\n            *ngIf=\"col.type === 'text' && !col.checkboxFilterOptions\"\n            type=\"text\"\n            id=\"{{ 'filter' + col.field }}\"\n            field=\"{{ col.field }}\"\n            [matchMode]=\"col.matchMode\"\n          >\n          </p-columnFilter>\n\n          <p-columnFilter\n            *ngIf=\"col.checkboxFilterOptions\"\n            field=\"{{ col.field }}\"\n            id=\"{{ 'filter' + col.field }}\"\n            class=\"hide-filter-button\"\n          >\n            <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\n              <p-multiSelect\n                id=\"{{ 'multiselect' + col.field }}\"\n                [ngModel]=\"value\"\n                [options]=\"col.checkboxFilterOptions\"\n                [placeholder]=\"'Select'\"\n                (onChange)=\"filter($event.value)\"\n              >\n              </p-multiSelect>\n            </ng-template>\n          </p-columnFilter>\n        </th>\n      </ng-container>\n    </tr>\n  </ng-template>\n\n  <!-- Rows data -->\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-ri=\"rowIndex\">\n    <tr (click)=\"onRowClick && onRowClick.emit(rowData)\" id=\"{{ 'tr' + rowData.id }}\">\n      <td *ngFor=\"let col of columns\">\n        <div *ngIf=\"col.type !== 'status'\" [ngClass]=\"{ 'fw-bold': col.bold }\">\n          {{ getFormattedText(col, rowData) }}\n        </div>\n\n        <div *ngIf=\"col.type === 'buttons'\" style=\"display: flex; justify-content: flex-end\">\n          <ng-container *ngFor=\"let button of col.buttons\">\n            <p-button\n              *ngIf=\"button.isVisible !== undefined ? button.isVisible(rowData) : true && !button.iconSvg\"\n              id=\"{{ 'btn' + button.label }}\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n            >\n              {{ determineButtonValue(button, 'label', rowData) }}\n            </p-button>\n\n            <p-button\n              *ngIf=\"button.iconSvg\"\n              [text]=\"true\"\n              [rounded]=\"true\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n              severity=\"secondary\"\n            >\n              <ng-template pTemplate=\"content\">\n                <span class=\"material-symbols-outlined\" style=\"font-size: 35px\">{{ button.iconSvg }}</span>\n              </ng-template>\n            </p-button>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n  <!-- Message if no table data -->\n  <ng-template pTemplate=\"emptymessage\" let-columns>\n    <tr>\n      <td [attr.colspan]=\"columns.length\">No results found.</td>\n    </tr>\n  </ng-template>\n</p-table>\n", styles: ["::ng-deep-dropdown [styleclass=p-paginator-rpp-options]{border:none!important}::ng-deep tr{height:30px}::ng-deep .p-multiselect-label-container{width:0px}::ng-deep .hide-filter-button{min-width:200px}::ng-deep .hide-filter-button .p-column-filter-menu-button{display:none}::ng-deep .p-datatable-wrapper{margin-bottom:1rem;min-height:70vh;overflow:auto!important}::ng-deep .column-header-items{display:flex;align-items:center}::ng-deep td[colspan]{height:300px!important;font-weight:700;text-align:center!important;pointer-events:none}::ng-deep table{width:100%;cursor:default}.column-width{width:200px;background-color:#fff!important}::ng-deep .p-datatable.p-datatable-sm .p-datatable-tbody>tr>td{padding:.25rem 1rem}.buttons-container{display:flex;justify-content:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { onRowClick: [{
                type: Output
            }], loadDataService: [{
                type: Input
            }], data: [{
                type: Input
            }], columns: [{
                type: Input
            }], tableSettings: [{
                type: Input
            }], dropdowns: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWVuZy10YWJsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jcC1wcmltZW5nLXRhYmxlL3NyYy9saWIvcHJpbWVuZy10YWJsZS9wcmltZW5nLXRhYmxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NwLXByaW1lbmctdGFibGUvc3JjL2xpYi9wcmltZW5nLXRhYmxlL3ByaW1lbmctdGFibGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkvRSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLDZCQUE2QixFQUM3QixzQkFBc0IsR0FDdkIsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQyxPQUFPLEVBQ0wsMEJBQTBCLEVBQzFCLGVBQWUsRUFDZixvQkFBb0IsRUFDcEIsMEJBQTBCLEVBQzFCLHVCQUF1QixHQUN4QixNQUFNLGtDQUFrQyxDQUFDOzs7Ozs7Ozs7QUFPMUMsTUFBTSxPQUFPLFlBQVk7SUFrQnZCLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFqQjVCLGVBQVUsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdwRCxTQUFJLEdBQVUsRUFBRSxDQUFDO1FBQ2pCLFlBQU8sR0FBa0IsRUFBRSxDQUFDO1FBQzVCLGtCQUFhLEdBQWtCLHNCQUFzQixDQUFDO1FBRy9ELHlCQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQzVDLCtCQUEwQixHQUFHLDBCQUEwQixDQUFDO1FBS3hELDBCQUFxQixHQUFHLHFCQUFxQixDQUFDO1FBQzlDLGtDQUE2QixHQUFHLDZCQUE2QixDQUFDO0lBRXJCLENBQUM7SUFFMUMsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBRTFC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LFlBQVk7a0JBTHhCLFNBQVM7K0JBQ0UsZUFBZTsrRkFLZixVQUFVO3NCQUFuQixNQUFNO2dCQUVFLGVBQWU7c0JBQXZCLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLE9BQU87c0JBQWYsS0FBSztnQkFDRyxhQUFhO3NCQUFyQixLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIERFRkFVTFRfUk9XU19QRVJfUEFHRSxcbiAgREVGQVVMVF9ST1dTX1BFUl9QQUdFX09QVElPTlMsXG4gIERFRkFVTFRfVEFCTEVfU0VUVElOR1MsXG59IGZyb20gJy4uL2NvbnN0YW50cy9wcmltZW5nLXRhYmxlJztcbmltcG9ydCB7IEZpbHRlclZhbHVlcywgVGFibGVDb2x1bW4sIFRhYmxlU2V0dGluZ3MgfSBmcm9tICcuLi9tb2RlbHMvcHJpbWVuZy10YWJsZS5tb2RlbCc7XG5pbXBvcnQge1xuICBidWlsZENoZWNrYm94RmlsdGVyT3B0aW9ucyxcbiAgZGVlcENsb25lT2JqZWN0LFxuICBkZXRlcm1pbmVCdXR0b25WYWx1ZSxcbiAgdHJhbnNmb3JtRmlsdGVyc0ZvclJlcXVlc3QsXG4gIHRyYW5zZm9ybVNvcnRGb3JSZXF1ZXN0LFxufSBmcm9tICcuLi9oZWxwZXJzL3ByaW1lbmctdGFibGUtaGVscGVycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ByaW1lbmctdGFibGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vcHJpbWVuZy10YWJsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3ByaW1lbmctdGFibGUuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgUHJpbWVOZ1RhYmxlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQE91dHB1dCgpIG9uUm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgpIGxvYWREYXRhU2VydmljZSE6IChwYXJhbXM6IGFueSkgPT4gT2JzZXJ2YWJsZTxhbnk+O1xuICBASW5wdXQoKSBkYXRhOiBhbnlbXSA9IFtdO1xuICBASW5wdXQoKSBjb2x1bW5zOiBUYWJsZUNvbHVtbltdID0gW107XG4gIEBJbnB1dCgpIHRhYmxlU2V0dGluZ3M6IFRhYmxlU2V0dGluZ3MgPSBERUZBVUxUX1RBQkxFX1NFVFRJTkdTO1xuICBASW5wdXQoKSBkcm9wZG93bnMhOiBSZWNvcmQ8c3RyaW5nLCBhbnlbXT47XG5cbiAgZGV0ZXJtaW5lQnV0dG9uVmFsdWUgPSBkZXRlcm1pbmVCdXR0b25WYWx1ZTtcbiAgYnVpbGRDaGVja2JveEZpbHRlck9wdGlvbnMgPSBidWlsZENoZWNrYm94RmlsdGVyT3B0aW9ucztcblxuICBsYXN0RXZlbnRMb2FkZWQhOiBhbnk7XG4gIHRvdGFsUmVjb3JkcyE6IG51bWJlcjtcblxuICBERUZBVUxUX1JPV1NfUEVSX1BBR0UgPSBERUZBVUxUX1JPV1NfUEVSX1BBR0U7XG4gIERFRkFVTFRfUk9XU19QRVJfUEFHRV9PUFRJT05TID0gREVGQVVMVF9ST1dTX1BFUl9QQUdFX09QVElPTlM7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlUGlwZTogRGF0ZVBpcGUpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5sYXN0RXZlbnRMb2FkZWQgPSB7fTtcblxuICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgIGlmIChjb2wuY2hlY2tib3hGaWx0ZXJPcHRpb25zKSB7XG4gICAgICAgIGNvbC5jaGVja2JveEZpbHRlck9wdGlvbnMgPSB0aGlzLmJ1aWxkQ2hlY2tib3hGaWx0ZXJPcHRpb25zKGNvbC5jaGVja2JveEZpbHRlck9wdGlvbnMgYXMgc3RyaW5nW10pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbG9hZERhdGEoZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5sb2FkRGF0YVNlcnZpY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RFdmVudExvYWRlZCA9IGRlZXBDbG9uZU9iamVjdChldmVudCk7XG4gICAgY29uc3QgY3VycmVudFBhZ2UgPSAoZXZlbnQuZmlyc3QgYXMgbnVtYmVyKSAvIChldmVudC5yb3dzIGFzIG51bWJlcikgKyAxO1xuXG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgIGZpbHRlcjogdHJhbnNmb3JtRmlsdGVyc0ZvclJlcXVlc3QoZXZlbnQuZmlsdGVycyBhcyBGaWx0ZXJWYWx1ZXMpLFxuICAgICAgc29ydDogZXZlbnQubXVsdGlTb3J0TWV0YSAmJiB0cmFuc2Zvcm1Tb3J0Rm9yUmVxdWVzdChldmVudC5tdWx0aVNvcnRNZXRhKSxcbiAgICAgIHBhZ2VhYmxlOiB7XG4gICAgICAgIC8vIFBhZ2VzIGNvdW50IHN0YXJ0IGZyb20gMCBvbiBCRSwgc28gd2UgYXJlIGRlY3JlYXNpbmcgdGhlIHBhZ2Ugd2l0aCAxXG4gICAgICAgIHBhZ2U6IGN1cnJlbnRQYWdlIC0gMSxcbiAgICAgICAgc2l6ZTogZXZlbnQucm93cyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHRoaXMubG9hZERhdGFTZXJ2aWNlKHBhcmFtcykuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IChyZXMpID0+IHtcbiAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICB0aGlzLnRvdGFsUmVjb3JkcyA9IDA7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBwYWdlLCBjb250ZW50IH0gPSByZXMuZGF0YSE7XG5cbiAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gY29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG90YWxSZWNvcmRzID0gcGFnZT8udG90YWxFbGVtZW50cyE7XG4gICAgICAgIHRoaXMudGFibGVTZXR0aW5ncy50b3RhbFJlY29yZHMgPSB0aGlzLnRvdGFsUmVjb3JkcztcbiAgICAgIH0sXG4gICAgICBlcnJvcjogKGVycikgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbG9hZERhdGEoKTogdm9pZCB7XG4gICAgdGhpcy5sb2FkRGF0YSh0aGlzLmxhc3RFdmVudExvYWRlZCk7XG4gIH1cblxuICB1cGRhdGVFbnRpdHk8VCBleHRlbmRzIHsgaWQ/OiBudW1iZXIgfT4odXBkYXRlZERhdGE6IFQpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZGF0YS5maW5kSW5kZXgoKHJvdykgPT4gcm93LmlkID09PSB1cGRhdGVkRGF0YS5pZCk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRW50aXR5ID0geyAuLi50aGlzLmRhdGFbaW5kZXhdLCAuLi51cGRhdGVkRGF0YSB9O1xuICAgICAgdGhpcy5kYXRhW2luZGV4XSA9IHVwZGF0ZWRFbnRpdHk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVGFibGVEYXRhKHVwZGF0ZWREYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIXVwZGF0ZWREYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhID0gWy4uLnVwZGF0ZWREYXRhXTtcbiAgfVxuXG4gIGdldEZvcm1hdHRlZFRleHQoY29sOiBhbnksIHJvd0RhdGE6IGFueSk6IGFueSB7XG4gICAgaWYgKCFyb3dEYXRhW2NvbC5maWVsZF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY29sLnR5cGUgPT09ICdkYXRlJykge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKHJvd0RhdGFbY29sLmZpZWxkXSwgJ3ktTU0tZCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygcm93RGF0YVtjb2wuZmllbGRdID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHJvd0RhdGFbY29sLmZpZWxkXS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93RGF0YVtjb2wuZmllbGRdO1xuICB9XG5cbiAgb25EYXRlU2VsZWN0KHZhbHVlOiBEYXRlLCBmaWx0ZXJDYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGNvbnN0IHRpbWV6b25lT2Zmc2V0ID0gdmFsdWUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwO1xuICAgICAgY29uc3QgYWRqdXN0ZWREYXRlID0gbmV3IERhdGUodmFsdWUuZ2V0VGltZSgpIC0gdGltZXpvbmVPZmZzZXQpO1xuICAgICAgY29uc3QgaXNvRm9ybWF0dGVkRGF0ZSA9IGFkanVzdGVkRGF0ZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIC0xKS5zcGxpdCgnVCcpWzBdO1xuXG4gICAgICBmaWx0ZXJDYWxsYmFjayhpc29Gb3JtYXR0ZWREYXRlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVCdXR0b25DbGljayhldmVudDogTW91c2VFdmVudCwgYnV0dG9uOiBhbnksIHJvd0RhdGE6IGFueSwgcm93SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGJ1dHRvbi5hY3Rpb24ocm93RGF0YSwgcm93SW5kZXgpO1xuICB9XG59XG4iLCI8cC10YWJsZVxuICAjZGF0YVRhYmxlXG4gIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxuICBbdmFsdWVdPVwiZGF0YVwiXG4gIFtwYWdpbmF0b3JdPVwiISF0YWJsZVNldHRpbmdzLnNob3dQYWdpbmF0b3JcIlxuICBbcm93c109XCJ0YWJsZVNldHRpbmdzLnJvd3NQZXJQYWdlIHx8IERFRkFVTFRfUk9XU19QRVJfUEFHRVwiXG4gIFtzaG93Q3VycmVudFBhZ2VSZXBvcnRdPVwidHJ1ZVwiXG4gIFtjdXJyZW50UGFnZVJlcG9ydFRlbXBsYXRlXT1cIidTaG93aW5nIHtmaXJzdH0gdG8ge2xhc3R9IG9mIHt0b3RhbFJlY29yZHN9IGVudHJpZXMnXCJcbiAgW3Jvd3NQZXJQYWdlT3B0aW9uc109XCJ0YWJsZVNldHRpbmdzLnJvd3NQZXJQYWdlT3B0aW9ucyB8fCBERUZBVUxUX1JPV1NfUEVSX1BBR0VfT1BUSU9OU1wiXG4gIFt0b3RhbFJlY29yZHNdPVwidGFibGVTZXR0aW5ncy50b3RhbFJlY29yZHNcIlxuICBbbGF6eV09XCJ0cnVlXCJcbiAgKG9uTGF6eUxvYWQpPVwibG9hZERhdGEoJGV2ZW50KVwiXG4gIHNvcnRNb2RlPVwibXVsdGlwbGVcIlxuICBzdHlsZUNsYXNzPVwicC1kYXRhdGFibGUtc21cIlxuICBbY2xhc3NdPVwidGFibGVTZXR0aW5ncy5jc3NDbGFzc1wiXG4gIFtzZWxlY3Rpb25Nb2RlXT1cInRhYmxlU2V0dGluZ3MuaXNSb3dDbGlja2FibGUgPyAnc2luZ2xlJyA6IG51bGxcIlxuPlxuICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiaGVhZGVyXCIgbGV0LWNvbHVtbnM+XG4gICAgPCEtLSBDb2x1bW4gTmFtZXMgLS0+XG4gICAgPHRyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgY29sIG9mIGNvbHVtbnNcIj5cbiAgICAgICAgPHRoICpuZ0lmPVwiY29sLnNvcnRhYmxlXCIgW3BTb3J0YWJsZUNvbHVtbl09XCJjb2wuZmllbGRcIiBbbmdDbGFzc109XCJjb2wuY29sQ2xhc3MgPyBjb2wuY29sQ2xhc3MgOiAnY29sdW1uLXdpZHRoJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW4taGVhZGVyLWl0ZW1zXCI+XG4gICAgICAgICAgICB7eyBjb2wuaGVhZGVyVGV4dCB9fVxuICAgICAgICAgICAgPHAtc29ydEljb24gaWQ9XCJ7eyAnc29ydCcgKyBjb2wuZmllbGQgfX1cIiBbZmllbGRdPVwiY29sLmZpZWxkXCI+PC9wLXNvcnRJY29uPlxuXG4gICAgICAgICAgICA8IS0tIEZpbHRlciBpZiBEYXRlIHR5cGUgLS0+XG4gICAgICAgICAgICA8cC1jb2x1bW5GaWx0ZXJcbiAgICAgICAgICAgICAgKm5nSWY9XCJjb2wudHlwZSA9PT0gJ2RhdGUnXCJcbiAgICAgICAgICAgICAgaWQ9XCJ7eyAnZmlsdGVyJyArIGNvbC5maWVsZCB9fVwiXG4gICAgICAgICAgICAgIHR5cGU9XCJkYXRlXCJcbiAgICAgICAgICAgICAgZGlzcGxheT1cIm1lbnVcIlxuICAgICAgICAgICAgICBmaWVsZD1cInt7IGNvbC5maWVsZCB9fVwiXG4gICAgICAgICAgICAgIFtzaG93TWF0Y2hNb2Rlc109XCJmYWxzZVwiXG4gICAgICAgICAgICAgIFtzaG93T3BlcmF0b3JdPVwiZmFsc2VcIlxuICAgICAgICAgICAgICBbc2hvd0FkZEJ1dHRvbl09XCJmYWxzZVwiXG4gICAgICAgICAgICAgIFtzaG93QXBwbHlCdXR0b25dPVwiZmFsc2VcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiZmlsdGVyXCIgbGV0LWZpbHRlcj1cImZpbHRlckNhbGxiYWNrXCI+XG4gICAgICAgICAgICAgICAgPHAtY2FsZW5kYXIgKG9uU2VsZWN0KT1cIm9uRGF0ZVNlbGVjdCgkZXZlbnQsIGZpbHRlcilcIj48L3AtY2FsZW5kYXI+XG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3AtY29sdW1uRmlsdGVyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RoPlxuXG4gICAgICAgIDx0aCBbbmdDbGFzc109XCJjb2wuY29sQ2xhc3MgPyBjb2wuY29sQ2xhc3MgOiAnY29sdW1uLXdpZHRoJ1wiICpuZ0lmPVwiIWNvbC5zb3J0YWJsZVwiPlxuICAgICAgICAgIHt7IGNvbC5oZWFkZXJUZXh0IH19XG4gICAgICAgIDwvdGg+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L3RyPlxuXG4gICAgPHRyPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgY29sIG9mIGNvbHVtbnNcIj5cbiAgICAgICAgPHRoIFtuZ0NsYXNzXT1cImNvbC5jb2xDbGFzcyA/IGNvbC5jb2xDbGFzcyA6ICdjb2x1bW4td2lkdGgnXCI+XG4gICAgICAgICAgPHAtY29sdW1uRmlsdGVyXG4gICAgICAgICAgICAqbmdJZj1cImNvbC50eXBlID09PSAndGV4dCcgJiYgIWNvbC5jaGVja2JveEZpbHRlck9wdGlvbnNcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgaWQ9XCJ7eyAnZmlsdGVyJyArIGNvbC5maWVsZCB9fVwiXG4gICAgICAgICAgICBmaWVsZD1cInt7IGNvbC5maWVsZCB9fVwiXG4gICAgICAgICAgICBbbWF0Y2hNb2RlXT1cImNvbC5tYXRjaE1vZGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICA8L3AtY29sdW1uRmlsdGVyPlxuXG4gICAgICAgICAgPHAtY29sdW1uRmlsdGVyXG4gICAgICAgICAgICAqbmdJZj1cImNvbC5jaGVja2JveEZpbHRlck9wdGlvbnNcIlxuICAgICAgICAgICAgZmllbGQ9XCJ7eyBjb2wuZmllbGQgfX1cIlxuICAgICAgICAgICAgaWQ9XCJ7eyAnZmlsdGVyJyArIGNvbC5maWVsZCB9fVwiXG4gICAgICAgICAgICBjbGFzcz1cImhpZGUtZmlsdGVyLWJ1dHRvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlIHBUZW1wbGF0ZT1cImZpbHRlclwiIGxldC12YWx1ZSBsZXQtZmlsdGVyPVwiZmlsdGVyQ2FsbGJhY2tcIj5cbiAgICAgICAgICAgICAgPHAtbXVsdGlTZWxlY3RcbiAgICAgICAgICAgICAgICBpZD1cInt7ICdtdWx0aXNlbGVjdCcgKyBjb2wuZmllbGQgfX1cIlxuICAgICAgICAgICAgICAgIFtuZ01vZGVsXT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICBbb3B0aW9uc109XCJjb2wuY2hlY2tib3hGaWx0ZXJPcHRpb25zXCJcbiAgICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiJ1NlbGVjdCdcIlxuICAgICAgICAgICAgICAgIChvbkNoYW5nZSk9XCJmaWx0ZXIoJGV2ZW50LnZhbHVlKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPC9wLW11bHRpU2VsZWN0PlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICA8L3AtY29sdW1uRmlsdGVyPlxuICAgICAgICA8L3RoPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC90cj5cbiAgPC9uZy10ZW1wbGF0ZT5cblxuICA8IS0tIFJvd3MgZGF0YSAtLT5cbiAgPG5nLXRlbXBsYXRlIHBUZW1wbGF0ZT1cImJvZHlcIiBsZXQtcm93RGF0YSBsZXQtY29sdW1ucz1cImNvbHVtbnNcIiBsZXQtcmk9XCJyb3dJbmRleFwiPlxuICAgIDx0ciAoY2xpY2spPVwib25Sb3dDbGljayAmJiBvblJvd0NsaWNrLmVtaXQocm93RGF0YSlcIiBpZD1cInt7ICd0cicgKyByb3dEYXRhLmlkIH19XCI+XG4gICAgICA8dGQgKm5nRm9yPVwibGV0IGNvbCBvZiBjb2x1bW5zXCI+XG4gICAgICAgIDxkaXYgKm5nSWY9XCJjb2wudHlwZSAhPT0gJ3N0YXR1cydcIiBbbmdDbGFzc109XCJ7ICdmdy1ib2xkJzogY29sLmJvbGQgfVwiPlxuICAgICAgICAgIHt7IGdldEZvcm1hdHRlZFRleHQoY29sLCByb3dEYXRhKSB9fVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2ICpuZ0lmPVwiY29sLnR5cGUgPT09ICdidXR0b25zJ1wiIHN0eWxlPVwiZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZFwiPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGJ1dHRvbiBvZiBjb2wuYnV0dG9uc1wiPlxuICAgICAgICAgICAgPHAtYnV0dG9uXG4gICAgICAgICAgICAgICpuZ0lmPVwiYnV0dG9uLmlzVmlzaWJsZSAhPT0gdW5kZWZpbmVkID8gYnV0dG9uLmlzVmlzaWJsZShyb3dEYXRhKSA6IHRydWUgJiYgIWJ1dHRvbi5pY29uU3ZnXCJcbiAgICAgICAgICAgICAgaWQ9XCJ7eyAnYnRuJyArIGJ1dHRvbi5sYWJlbCB9fVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1tZFwiXG4gICAgICAgICAgICAgIFtuZ0NsYXNzXT1cImRldGVybWluZUJ1dHRvblZhbHVlKGJ1dHRvbiwgJ2J0bkNsYXNzJywgcm93RGF0YSlcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlQnV0dG9uQ2xpY2soJGV2ZW50LCBidXR0b24sIHJvd0RhdGEsIHJpKVwiXG4gICAgICAgICAgICAgIFtkaXNhYmxlZF09XCJidXR0b24uaXNBY3RpdmUgIT09IHVuZGVmaW5lZCA/ICFidXR0b24uaXNBY3RpdmUocm93RGF0YSkgOiBmYWxzZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7IGRldGVybWluZUJ1dHRvblZhbHVlKGJ1dHRvbiwgJ2xhYmVsJywgcm93RGF0YSkgfX1cbiAgICAgICAgICAgIDwvcC1idXR0b24+XG5cbiAgICAgICAgICAgIDxwLWJ1dHRvblxuICAgICAgICAgICAgICAqbmdJZj1cImJ1dHRvbi5pY29uU3ZnXCJcbiAgICAgICAgICAgICAgW3RleHRdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgIFtyb3VuZGVkXT1cInRydWVcIlxuICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tbWRcIlxuICAgICAgICAgICAgICBbbmdDbGFzc109XCJkZXRlcm1pbmVCdXR0b25WYWx1ZShidXR0b24sICdidG5DbGFzcycsIHJvd0RhdGEpXCJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUJ1dHRvbkNsaWNrKCRldmVudCwgYnV0dG9uLCByb3dEYXRhLCByaSlcIlxuICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiYnV0dG9uLmlzQWN0aXZlICE9PSB1bmRlZmluZWQgPyAhYnV0dG9uLmlzQWN0aXZlKHJvd0RhdGEpIDogZmFsc2VcIlxuICAgICAgICAgICAgICBzZXZlcml0eT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBwVGVtcGxhdGU9XCJjb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkXCIgc3R5bGU9XCJmb250LXNpemU6IDM1cHhcIj57eyBidXR0b24uaWNvblN2ZyB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvcC1idXR0b24+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICA8L25nLXRlbXBsYXRlPlxuICA8IS0tIE1lc3NhZ2UgaWYgbm8gdGFibGUgZGF0YSAtLT5cbiAgPG5nLXRlbXBsYXRlIHBUZW1wbGF0ZT1cImVtcHR5bWVzc2FnZVwiIGxldC1jb2x1bW5zPlxuICAgIDx0cj5cbiAgICAgIDx0ZCBbYXR0ci5jb2xzcGFuXT1cImNvbHVtbnMubGVuZ3RoXCI+Tm8gcmVzdWx0cyBmb3VuZC48L3RkPlxuICAgIDwvdHI+XG4gIDwvbmctdGVtcGxhdGU+XG48L3AtdGFibGU+XG4iXX0=