export const transformSortForRequest = (criteria) => criteria.map((item) => {
    const direction = item.order === 1 ? 'asc' : 'desc';
    return `${item.field}:${direction}`;
});
export const transformFiltersForRequest = (filters) => {
    const transformedArray = [];
    for (const key in filters) {
        const filterValue = filters[key];
        if (!filterValue) {
            continue;
        }
        (Array.isArray(filterValue) ? filterValue : [filterValue]).forEach((filter) => {
            const shorthandMatchMode = getShorthandMatchMode(filter.matchMode);
            if (filter.value) {
                if (Array.isArray(filter.value)) {
                    // when multiple values are selected, we need to use 'in' operator
                    const value = filter.value.join(';');
                    transformedArray.push(`${key}:in:${value}`);
                }
                else {
                    transformedArray.push(`${key}:${shorthandMatchMode}:${filter.value}`);
                }
            }
        });
    }
    return transformedArray;
};
export const getShorthandMatchMode = (matchMode) => {
    switch (matchMode) {
        case 'startsWith':
            return 'sw';
        case 'dateIs':
        case 'contains':
            return 'like';
        case 'notContains':
            return 'neq';
        case 'endsWith':
            return 'ew';
        case 'equals':
            return 'eq';
        case 'notEquals':
            return 'neq';
        default:
            return matchMode;
    }
};
export const buildCheckboxFilterOptions = (filterOptions) => filterOptions.map((filterOption) => ({
    label: filterOption,
    value: filterOption,
}));
export const deepCloneObject = (objectToClone) => {
    if (objectToClone === null || typeof objectToClone !== 'object') {
        return objectToClone;
    }
    if (Array.isArray(objectToClone)) {
        return objectToClone.map(deepCloneObject);
    }
    if (objectToClone instanceof Object) {
        const clonedObject = {};
        for (const key in objectToClone) {
            if (Object.hasOwnProperty.call(objectToClone, key)) {
                clonedObject[key] = deepCloneObject(objectToClone[key]);
            }
        }
        return clonedObject;
    }
};
export const determineButtonValue = (button, property, rowData) => {
    const propValue = button[property];
    if (propValue && typeof propValue === 'function') {
        return propValue(rowData);
    }
    return propValue ?? '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWVuZy10YWJsZS1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3AtcHJpbWVuZy10YWJsZS9zcmMvbGliL2hlbHBlcnMvcHJpbWVuZy10YWJsZS1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQUMsUUFBc0IsRUFBWSxFQUFFLENBQzFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUNwQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDcEQsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxFQUFFLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFFTCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLE9BQXFCLEVBQVksRUFBRTtJQUM1RSxNQUFNLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztJQUV0QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUN6QixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixTQUFTO1NBQ1Y7UUFFRCxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO1lBQ3BGLE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ25FLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDaEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDL0Isa0VBQWtFO29CQUNsRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDckMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQzdDO3FCQUFNO29CQUNMLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxrQkFBa0IsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztpQkFDdkU7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxPQUFPLGdCQUFnQixDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsU0FBaUIsRUFBVSxFQUFFO0lBQ2pFLFFBQVEsU0FBUyxFQUFFO1FBQ2pCLEtBQUssWUFBWTtZQUNmLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLFVBQVU7WUFDYixPQUFPLE1BQU0sQ0FBQztRQUNoQixLQUFLLGFBQWE7WUFDaEIsT0FBTyxLQUFLLENBQUM7UUFDZixLQUFLLFVBQVU7WUFDYixPQUFPLElBQUksQ0FBQztRQUNkLEtBQUssUUFBUTtZQUNYLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxXQUFXO1lBQ2QsT0FBTyxLQUFLLENBQUM7UUFDZjtZQUNFLE9BQU8sU0FBUyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxhQUF1QixFQUFpQyxFQUFFLENBQ25HLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsS0FBSyxFQUFFLFlBQVk7SUFDbkIsS0FBSyxFQUFFLFlBQVk7Q0FDcEIsQ0FBQyxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxhQUFrQixFQUFPLEVBQUU7SUFDekQsSUFBSSxhQUFhLEtBQUssSUFBSSxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsRUFBRTtRQUMvRCxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtRQUNoQyxPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDM0M7SUFFRCxJQUFJLGFBQWEsWUFBWSxNQUFNLEVBQUU7UUFDbkMsTUFBTSxZQUFZLEdBQTJCLEVBQUUsQ0FBQztRQUNoRCxLQUFLLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRTtZQUMvQixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDbEQsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN6RDtTQUNGO1FBQ0QsT0FBTyxZQUFZLENBQUM7S0FDckI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE1BQW1CLEVBQUUsUUFBZ0IsRUFBRSxPQUFZLEVBQWdCLEVBQUU7SUFDeEcsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQTZCLENBQVEsQ0FBQztJQUUvRCxJQUFJLFNBQVMsSUFBSSxPQUFPLFNBQVMsS0FBSyxVQUFVLEVBQUU7UUFDaEQsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0I7SUFFRCxPQUFPLFNBQVMsSUFBSSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29sdW1uQ2hlY2tib3hGaWx0ZXJPcHRpb25zLFxuICBGaWx0ZXIsXG4gIEZpbHRlclZhbHVlcyxcbiAgU29ydFZhbHVlcyxcbiAgVGFibGVCdXR0b24sXG59IGZyb20gJy4uL21vZGVscy9wcmltZW5nLXRhYmxlLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybVNvcnRGb3JSZXF1ZXN0ID0gKGNyaXRlcmlhOiBTb3J0VmFsdWVzW10pOiBzdHJpbmdbXSA9PlxuICBjcml0ZXJpYS5tYXAoKGl0ZW0pID0+IHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBpdGVtLm9yZGVyID09PSAxID8gJ2FzYycgOiAnZGVzYyc7XG4gICAgcmV0dXJuIGAke2l0ZW0uZmllbGR9OiR7ZGlyZWN0aW9ufWA7XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtRmlsdGVyc0ZvclJlcXVlc3QgPSAoZmlsdGVyczogRmlsdGVyVmFsdWVzKTogc3RyaW5nW10gPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZEFycmF5OiBzdHJpbmdbXSA9IFtdO1xuXG4gIGZvciAoY29uc3Qga2V5IGluIGZpbHRlcnMpIHtcbiAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IGZpbHRlcnNba2V5XTtcblxuICAgIGlmICghZmlsdGVyVmFsdWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIChBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlKSA/IGZpbHRlclZhbHVlIDogW2ZpbHRlclZhbHVlXSkuZm9yRWFjaCgoZmlsdGVyOiBGaWx0ZXIpID0+IHtcbiAgICAgIGNvbnN0IHNob3J0aGFuZE1hdGNoTW9kZSA9IGdldFNob3J0aGFuZE1hdGNoTW9kZShmaWx0ZXIubWF0Y2hNb2RlKTtcbiAgICAgIGlmIChmaWx0ZXIudmFsdWUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmlsdGVyLnZhbHVlKSkge1xuICAgICAgICAgIC8vIHdoZW4gbXVsdGlwbGUgdmFsdWVzIGFyZSBzZWxlY3RlZCwgd2UgbmVlZCB0byB1c2UgJ2luJyBvcGVyYXRvclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZmlsdGVyLnZhbHVlLmpvaW4oJzsnKTtcbiAgICAgICAgICB0cmFuc2Zvcm1lZEFycmF5LnB1c2goYCR7a2V5fTppbjoke3ZhbHVlfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYW5zZm9ybWVkQXJyYXkucHVzaChgJHtrZXl9OiR7c2hvcnRoYW5kTWF0Y2hNb2RlfToke2ZpbHRlci52YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zZm9ybWVkQXJyYXk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2hvcnRoYW5kTWF0Y2hNb2RlID0gKG1hdGNoTW9kZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgc3dpdGNoIChtYXRjaE1vZGUpIHtcbiAgICBjYXNlICdzdGFydHNXaXRoJzpcbiAgICAgIHJldHVybiAnc3cnO1xuICAgIGNhc2UgJ2RhdGVJcyc6XG4gICAgY2FzZSAnY29udGFpbnMnOlxuICAgICAgcmV0dXJuICdsaWtlJztcbiAgICBjYXNlICdub3RDb250YWlucyc6XG4gICAgICByZXR1cm4gJ25lcSc7XG4gICAgY2FzZSAnZW5kc1dpdGgnOlxuICAgICAgcmV0dXJuICdldyc7XG4gICAgY2FzZSAnZXF1YWxzJzpcbiAgICAgIHJldHVybiAnZXEnO1xuICAgIGNhc2UgJ25vdEVxdWFscyc6XG4gICAgICByZXR1cm4gJ25lcSc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBtYXRjaE1vZGU7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBidWlsZENoZWNrYm94RmlsdGVyT3B0aW9ucyA9IChmaWx0ZXJPcHRpb25zOiBzdHJpbmdbXSk6IENvbHVtbkNoZWNrYm94RmlsdGVyT3B0aW9uc1tdID0+XG4gIGZpbHRlck9wdGlvbnMubWFwKChmaWx0ZXJPcHRpb24pID0+ICh7XG4gICAgbGFiZWw6IGZpbHRlck9wdGlvbixcbiAgICB2YWx1ZTogZmlsdGVyT3B0aW9uLFxuICB9KSk7XG5cbmV4cG9ydCBjb25zdCBkZWVwQ2xvbmVPYmplY3QgPSAob2JqZWN0VG9DbG9uZTogYW55KTogYW55ID0+IHtcbiAgaWYgKG9iamVjdFRvQ2xvbmUgPT09IG51bGwgfHwgdHlwZW9mIG9iamVjdFRvQ2xvbmUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvQ2xvbmU7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RUb0Nsb25lKSkge1xuICAgIHJldHVybiBvYmplY3RUb0Nsb25lLm1hcChkZWVwQ2xvbmVPYmplY3QpO1xuICB9XG5cbiAgaWYgKG9iamVjdFRvQ2xvbmUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICBjb25zdCBjbG9uZWRPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3RUb0Nsb25lKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0VG9DbG9uZSwga2V5KSkge1xuICAgICAgICBjbG9uZWRPYmplY3Rba2V5XSA9IGRlZXBDbG9uZU9iamVjdChvYmplY3RUb0Nsb25lW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkT2JqZWN0O1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGV0ZXJtaW5lQnV0dG9uVmFsdWUgPSAoYnV0dG9uOiBUYWJsZUJ1dHRvbiwgcHJvcGVydHk6IHN0cmluZywgcm93RGF0YTogYW55KTogc3RyaW5nIHwgYW55ID0+IHtcbiAgY29uc3QgcHJvcFZhbHVlID0gYnV0dG9uW3Byb3BlcnR5IGFzIGtleW9mIFRhYmxlQnV0dG9uXSBhcyBhbnk7XG5cbiAgaWYgKHByb3BWYWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZShyb3dEYXRhKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wVmFsdWUgPz8gJyc7XG59O1xuIl19