{"version":3,"file":"cp-primeng-table.mjs","sources":["../../../projects/cp-primeng-table/src/lib/constants/primeng-table.ts","../../../projects/cp-primeng-table/src/lib/helpers/primeng-table-helpers.ts","../../../projects/cp-primeng-table/src/lib/primeng-table/primeng-table.component.ts","../../../projects/cp-primeng-table/src/lib/primeng-table/primeng-table.component.html","../../../projects/cp-primeng-table/src/lib/services/primeng-table-settings.service.ts","../../../projects/cp-primeng-table/src/lib/helpers/custom-date-transform.ts","../../../projects/cp-primeng-table/src/lib/pipes/custom-date.pipe.ts","../../../projects/cp-primeng-table/src/lib/primeng-table.module.ts","../../../projects/cp-primeng-table/src/public-api.ts","../../../projects/cp-primeng-table/src/cp-primeng-table.ts"],"sourcesContent":["import { TableSettings } from '../models/primeng-table.model';\n\nexport const DEFAULT_ROWS_PER_PAGE_OPTIONS = [10, 20, 30, 40];\nexport const DEFAULT_ROWS_PER_PAGE = 10;\nexport const DEFAULT_TABLE_SETTINGS: TableSettings = {\n  showPaginator: true,\n  rowsPerPage: DEFAULT_ROWS_PER_PAGE,\n  rowsPerPageOptions: DEFAULT_ROWS_PER_PAGE_OPTIONS,\n  totalRecords: 0,\n  isRowClickable: false,\n  cssClass: '',\n};\nexport const ENABLE_FILTER_SORT = {\n  filterable: true,\n  sortable: true,\n};\n","import {\n  ColumnCheckboxFilterOptions,\n  Filter,\n  FilterValues,\n  SortValues,\n  TableButton,\n} from '../models/primeng-table.model';\n\nexport const transformSortForRequest = (criteria: SortValues[]): string[] =>\n  criteria.map((item) => {\n    const direction = item.order === 1 ? 'asc' : 'desc';\n    return `${item.field}:${direction}`;\n  });\n\nexport const transformFiltersForRequest = (filters: FilterValues): string[] => {\n  const transformedArray: string[] = [];\n\n  for (const key in filters) {\n    const filterValue = filters[key];\n\n    if (!filterValue) {\n      continue;\n    }\n\n    (Array.isArray(filterValue) ? filterValue : [filterValue]).forEach((filter: Filter) => {\n      const shorthandMatchMode = getShorthandMatchMode(filter.matchMode);\n      if (filter.value) {\n        if (Array.isArray(filter.value)) {\n          // when multiple values are selected, we need to use 'in' operator\n          const value = filter.value.join(';');\n          transformedArray.push(`${key}:in:${value}`);\n        } else {\n          transformedArray.push(`${key}:${shorthandMatchMode}:${filter.value}`);\n        }\n      }\n    });\n  }\n\n  return transformedArray;\n};\n\nexport const getShorthandMatchMode = (matchMode: string): string => {\n  switch (matchMode) {\n    case 'startsWith':\n      return 'sw';\n    case 'dateIs':\n    case 'contains':\n      return 'like';\n    case 'notContains':\n      return 'neq';\n    case 'endsWith':\n      return 'ew';\n    case 'equals':\n      return 'eq';\n    case 'notEquals':\n      return 'neq';\n    default:\n      return matchMode;\n  }\n};\n\nexport const buildCheckboxFilterOptions = (filterOptions: string[]): ColumnCheckboxFilterOptions[] =>\n  filterOptions.map((filterOption) => ({\n    label: filterOption,\n    value: filterOption,\n  }));\n\nexport const deepCloneObject = (objectToClone: any): any => {\n  if (objectToClone === null || typeof objectToClone !== 'object') {\n    return objectToClone;\n  }\n\n  if (Array.isArray(objectToClone)) {\n    return objectToClone.map(deepCloneObject);\n  }\n\n  if (objectToClone instanceof Object) {\n    const clonedObject: { [key: string]: any } = {};\n    for (const key in objectToClone) {\n      if (Object.hasOwnProperty.call(objectToClone, key)) {\n        clonedObject[key] = deepCloneObject(objectToClone[key]);\n      }\n    }\n    return clonedObject;\n  }\n};\n\nexport const determineButtonValue = (button: TableButton, property: string, rowData: any): string | any => {\n  const propValue = button[property as keyof TableButton] as any;\n\n  if (propValue && typeof propValue === 'function') {\n    return propValue(rowData);\n  }\n\n  return propValue ?? '';\n};\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport {\n  DEFAULT_ROWS_PER_PAGE,\n  DEFAULT_ROWS_PER_PAGE_OPTIONS,\n  DEFAULT_TABLE_SETTINGS,\n} from '../constants/primeng-table';\nimport { FilterValues, TableColumn, TableSettings } from '../models/primeng-table.model';\nimport {\n  buildCheckboxFilterOptions,\n  deepCloneObject,\n  determineButtonValue,\n  transformFiltersForRequest,\n  transformSortForRequest,\n} from '../helpers/primeng-table-helpers';\n\n@Component({\n  selector: 'primeng-table',\n  templateUrl: './primeng-table.component.html',\n  styleUrls: ['./primeng-table.component.scss'],\n})\nexport class PrimeNgTable implements OnInit {\n  @Output() onRowClick: EventEmitter<any> = new EventEmitter();\n\n  @Input() loadDataService!: (params: any) => Observable<any>;\n  @Input() data: any[] = [];\n  @Input() columns: TableColumn[] = [];\n  @Input() tableSettings: TableSettings = DEFAULT_TABLE_SETTINGS;\n  @Input() dropdowns!: Record<string, any[]>;\n\n  determineButtonValue = determineButtonValue;\n  buildCheckboxFilterOptions = buildCheckboxFilterOptions;\n\n  lastEventLoaded!: any;\n  totalRecords!: number;\n\n  DEFAULT_ROWS_PER_PAGE = DEFAULT_ROWS_PER_PAGE;\n  DEFAULT_ROWS_PER_PAGE_OPTIONS = DEFAULT_ROWS_PER_PAGE_OPTIONS;\n\n  constructor(private datePipe: DatePipe) {}\n\n  ngOnInit(): void {\n    this.lastEventLoaded = {};\n\n    this.columns.forEach((col) => {\n      if (col.checkboxFilterOptions) {\n        col.checkboxFilterOptions = this.buildCheckboxFilterOptions(col.checkboxFilterOptions as string[]);\n      }\n    });\n  }\n\n  loadData(event: any): void {\n    if (!this.loadDataService) {\n      return;\n    }\n\n    this.lastEventLoaded = deepCloneObject(event);\n    const currentPage = (event.first as number) / (event.rows as number) + 1;\n\n    let params = {\n      filter: transformFiltersForRequest(event.filters as FilterValues),\n      sort: event.multiSortMeta && transformSortForRequest(event.multiSortMeta),\n      pageable: {\n        // Pages count start from 0 on BE, so we are decreasing the page with 1\n        page: currentPage - 1,\n        size: event.rows,\n      },\n    };\n\n    this.loadDataService(params).subscribe({\n      next: (res) => {\n        if (!res) {\n          this.totalRecords = 0;\n          return;\n        }\n\n        const { page, content } = res.data!;\n\n        if (!content) {\n          this.data = [];\n        } else {\n          this.data = content;\n        }\n\n        this.totalRecords = page?.totalElements!;\n        this.tableSettings.totalRecords = this.totalRecords;\n      },\n      error: (err) => {\n        throw Error(err);\n      },\n    });\n  }\n\n  reloadData(): void {\n    this.loadData(this.lastEventLoaded);\n  }\n\n  updateEntity<T extends { id?: number }>(updatedData: T): void {\n    const index = this.data.findIndex((row) => row.id === updatedData.id);\n\n    if (index !== -1) {\n      const updatedEntity = { ...this.data[index], ...updatedData };\n      this.data[index] = updatedEntity;\n    }\n  }\n\n  updateTableData(updatedData: any): void {\n    if (!updatedData) {\n      return;\n    }\n\n    this.data = [...updatedData];\n  }\n\n  getFormattedText(col: any, rowData: any): any {\n    if (!rowData[col.field]) {\n      return;\n    }\n\n    if (col.type === 'date') {\n      return this.datePipe.transform(rowData[col.field], 'y-MM-d');\n    }\n\n    if (typeof rowData[col.field] === 'object') {\n      return rowData[col.field].value;\n    }\n\n    return rowData[col.field];\n  }\n\n  onDateSelect(value: Date, filterCallback: Function): void {\n    if (value) {\n      const timezoneOffset = value.getTimezoneOffset() * 60000;\n      const adjustedDate = new Date(value.getTime() - timezoneOffset);\n      const isoFormattedDate = adjustedDate.toISOString().slice(0, -1).split('T')[0];\n\n      filterCallback(isoFormattedDate);\n    }\n  }\n\n  handleButtonClick(event: MouseEvent, button: any, rowData: any, rowIndex: number): void {\n    event.stopPropagation();\n    button.action(rowData, rowIndex);\n  }\n}\n","<p-table\n  #dataTable\n  [columns]=\"columns\"\n  [value]=\"data\"\n  [paginator]=\"!!tableSettings.showPaginator\"\n  [rows]=\"tableSettings.rowsPerPage || DEFAULT_ROWS_PER_PAGE\"\n  [showCurrentPageReport]=\"true\"\n  [currentPageReportTemplate]=\"'Showing {first} to {last} of {totalRecords} entries'\"\n  [rowsPerPageOptions]=\"tableSettings.rowsPerPageOptions || DEFAULT_ROWS_PER_PAGE_OPTIONS\"\n  [totalRecords]=\"tableSettings.totalRecords\"\n  [lazy]=\"true\"\n  (onLazyLoad)=\"loadData($event)\"\n  sortMode=\"multiple\"\n  styleClass=\"p-datatable-sm\"\n  [class]=\"tableSettings.cssClass\"\n  [selectionMode]=\"tableSettings.isRowClickable ? 'single' : null\"\n>\n  <ng-template pTemplate=\"header\" let-columns>\n    <!-- Column Names -->\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th *ngIf=\"col.sortable\" [pSortableColumn]=\"col.field\" [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <div class=\"column-header-items\">\n            {{ col.headerText }}\n            <p-sortIcon id=\"{{ 'sort' + col.field }}\" [field]=\"col.field\"></p-sortIcon>\n\n            <!-- Filter if Date type -->\n            <p-columnFilter\n              *ngIf=\"col.type === 'date'\"\n              id=\"{{ 'filter' + col.field }}\"\n              type=\"date\"\n              display=\"menu\"\n              field=\"{{ col.field }}\"\n              [showMatchModes]=\"false\"\n              [showOperator]=\"false\"\n              [showAddButton]=\"false\"\n              [showApplyButton]=\"false\"\n            >\n              <ng-template pTemplate=\"filter\" let-filter=\"filterCallback\">\n                <p-calendar (onSelect)=\"onDateSelect($event, filter)\"></p-calendar>\n              </ng-template>\n            </p-columnFilter>\n          </div>\n        </th>\n\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\" *ngIf=\"!col.sortable\">\n          {{ col.headerText }}\n        </th>\n      </ng-container>\n    </tr>\n\n    <tr>\n      <ng-container *ngFor=\"let col of columns\">\n        <th [ngClass]=\"col.colClass ? col.colClass : 'column-width'\">\n          <p-columnFilter\n            *ngIf=\"col.type === 'text' && !col.checkboxFilterOptions\"\n            type=\"text\"\n            id=\"{{ 'filter' + col.field }}\"\n            field=\"{{ col.field }}\"\n            [matchMode]=\"col.matchMode\"\n          >\n          </p-columnFilter>\n\n          <p-columnFilter\n            *ngIf=\"col.checkboxFilterOptions\"\n            field=\"{{ col.field }}\"\n            id=\"{{ 'filter' + col.field }}\"\n            class=\"hide-filter-button\"\n          >\n            <ng-template pTemplate=\"filter\" let-value let-filter=\"filterCallback\">\n              <p-multiSelect\n                id=\"{{ 'multiselect' + col.field }}\"\n                [ngModel]=\"value\"\n                [options]=\"col.checkboxFilterOptions\"\n                [placeholder]=\"'Select'\"\n                (onChange)=\"filter($event.value)\"\n              >\n              </p-multiSelect>\n            </ng-template>\n          </p-columnFilter>\n        </th>\n      </ng-container>\n    </tr>\n  </ng-template>\n\n  <!-- Rows data -->\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\" let-ri=\"rowIndex\">\n    <tr (click)=\"onRowClick && onRowClick.emit(rowData)\" id=\"{{ 'tr' + rowData.id }}\">\n      <td *ngFor=\"let col of columns\">\n        <div *ngIf=\"col.type !== 'status'\" [ngClass]=\"{ 'fw-bold': col.bold }\">\n          {{ getFormattedText(col, rowData) }}\n        </div>\n\n        <div *ngIf=\"col.type === 'buttons'\" style=\"display: flex; justify-content: flex-end\">\n          <ng-container *ngFor=\"let button of col.buttons\">\n            <p-button\n              *ngIf=\"button.isVisible !== undefined ? button.isVisible(rowData) : true && !button.iconSvg\"\n              id=\"{{ 'btn' + button.label }}\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n            >\n              {{ determineButtonValue(button, 'label', rowData) }}\n            </p-button>\n\n            <p-button\n              *ngIf=\"button.iconSvg\"\n              [text]=\"true\"\n              [rounded]=\"true\"\n              class=\"btn btn-md\"\n              [ngClass]=\"determineButtonValue(button, 'btnClass', rowData)\"\n              (click)=\"handleButtonClick($event, button, rowData, ri)\"\n              [disabled]=\"button.isActive !== undefined ? !button.isActive(rowData) : false\"\n              severity=\"secondary\"\n            >\n              <ng-template pTemplate=\"content\">\n                <span class=\"material-symbols-outlined\" style=\"font-size: 35px\">{{ button.iconSvg }}</span>\n              </ng-template>\n            </p-button>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </ng-template>\n  <!-- Message if no table data -->\n  <ng-template pTemplate=\"emptymessage\" let-columns>\n    <tr>\n      <td [attr.colspan]=\"columns.length\">No results found.</td>\n    </tr>\n  </ng-template>\n</p-table>\n","import { Injectable, Inject } from '@angular/core';\n\nimport { PrimeNgTableConfig } from '../models/primeng-table-config';\n\n@Injectable()\nexport class PrimeNgTableSettingsService {\n  constructor(@Inject('config') private config: PrimeNgTableConfig) {}\n\n  get libConfig() {\n    return this.config;\n  }\n\n  setLibConfig(newConfig: PrimeNgTableConfig) {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n","import { formatDate } from '@angular/common';\n\nconst MINUTES_IN_MILLISECONDS: number = 60000;\n\nexport const customDateTransform = (date: any, type?: string, showHours?: boolean): any => {\n  let dateFormat = 'dd MMM yyyy';\n\n  if (!date) {\n    return null;\n  }\n\n  let dateObj;\n  if (showHours) {\n    dateFormat += ' H:mm';\n  }\n\n  switch (type) {\n    case 'iso':\n      if (typeof date === 'string') {\n        dateObj = new Date(date);\n      } else {\n        dateObj = new Date(date.setHours(0, 0, 0, 0));\n      }\n\n      return new Date(dateObj.getTime() - dateObj.getTimezoneOffset() * MINUTES_IN_MILLISECONDS).toISOString();\n    case 'dateTo':\n      dateObj = new Date(date);\n      if (dateObj.getDay() === new Date().getDay()) {\n        dateObj = new Date();\n      } else {\n        dateObj = new Date(dateObj.setHours(23, 59, 59, 59));\n      }\n      return dateObj;\n    default:\n      return formatDate(date, dateFormat, 'en-GB').toLocaleUpperCase();\n  }\n};\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { customDateTransform } from '../helpers/custom-date-transform';\n\n@Pipe({\n  name: 'customDate',\n})\nexport class CustomDatePipe extends DatePipe implements PipeTransform {\n  override transform(date: any, type?: any): any {\n    return customDateTransform(date, type);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DatePipe } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { PrimeNgTable } from './primeng-table/primeng-table.component';\nimport { PrimeNgTableConfig } from './models/primeng-table-config';\nimport { PrimeNgTableSettingsService } from './services/primeng-table-settings.service';\n\nimport { TableModule } from 'primeng/table';\nimport { ButtonModule } from 'primeng/button';\nimport { CalendarModule } from 'primeng/calendar';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { CustomDatePipe } from './pipes/custom-date.pipe';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { InputNumberModule } from 'primeng/inputnumber';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\n\n@NgModule({\n  declarations: [PrimeNgTable, CustomDatePipe],\n  imports: [\n    TableModule,\n    ButtonModule,\n    CalendarModule,\n    MultiSelectModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TooltipModule,\n    DropdownModule,\n    InputTextModule,\n    InputNumberModule,\n    InputTextModule,\n    InputTextareaModule,\n  ],\n  exports: [PrimeNgTable, CustomDatePipe],\n  providers: [\n    TableModule,\n    ButtonModule,\n    CalendarModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MultiSelectModule,\n    DatePipe,\n    CustomDatePipe,\n    TooltipModule,\n    DropdownModule,\n    InputTextModule,\n    InputNumberModule,\n    InputTextModule,\n    InputTextareaModule,\n  ],\n})\nexport class PrimeNgTableModule {\n  static forRoot(config: PrimeNgTableConfig): ModuleWithProviders<PrimeNgTableModule> {\n    return {\n      ngModule: PrimeNgTableModule,\n      providers: [PrimeNgTableSettingsService, { provide: 'config', useValue: config }],\n    };\n  }\n}\n","/*\n * Public API Surface of cp-primeng-table\n */\n\nexport * from './lib/primeng-table/primeng-table.component';\nexport * from './lib/primeng-table.module';\nexport * from './lib/pipes/custom-date.pipe';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}